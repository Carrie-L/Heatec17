package com.adsale.HEATEC.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.adsale.HEATEC.dao.Country;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "COUNTRY".
*/
public class CountryDao extends AbstractDao<Country, Void> {

    public static final String TABLENAME = "COUNTRY";

    /**
     * Properties of entity Country.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property CountryID = new Property(0, String.class, "CountryID", false, "COUNTRY_ID");
        public final static Property CountryNameTW = new Property(1, String.class, "CountryNameTW", false, "COUNTRY_NAME_TW");
        public final static Property CountryNameCN = new Property(2, String.class, "CountryNameCN", false, "COUNTRY_NAME_CN");
        public final static Property CountryNameEN = new Property(3, String.class, "CountryNameEN", false, "COUNTRY_NAME_EN");
        public final static Property SortTW = new Property(4, String.class, "SortTW", false, "SORT_TW");
        public final static Property SortCN = new Property(5, String.class, "SortCN", false, "SORT_CN");
        public final static Property SortEN = new Property(6, String.class, "SortEN", false, "SORT_EN");
    };


    public CountryDao(DaoConfig config) {
        super(config);
    }
    
    public CountryDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"COUNTRY\" (" + //
                "\"COUNTRY_ID\" TEXT," + // 0: CountryID
                "\"COUNTRY_NAME_TW\" TEXT," + // 1: CountryNameTW
                "\"COUNTRY_NAME_CN\" TEXT," + // 2: CountryNameCN
                "\"COUNTRY_NAME_EN\" TEXT," + // 3: CountryNameEN
                "\"SORT_TW\" TEXT," + // 4: SortTW
                "\"SORT_CN\" TEXT," + // 5: SortCN
                "\"SORT_EN\" TEXT);"); // 6: SortEN
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"COUNTRY\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Country entity) {
        stmt.clearBindings();
 
        String CountryID = entity.getCountryID();
        if (CountryID != null) {
            stmt.bindString(1, CountryID);
        }
 
        String CountryNameTW = entity.getCountryNameTW();
        if (CountryNameTW != null) {
            stmt.bindString(2, CountryNameTW);
        }
 
        String CountryNameCN = entity.getCountryNameCN();
        if (CountryNameCN != null) {
            stmt.bindString(3, CountryNameCN);
        }
 
        String CountryNameEN = entity.getCountryNameEN();
        if (CountryNameEN != null) {
            stmt.bindString(4, CountryNameEN);
        }
 
        String SortTW = entity.getSortTW();
        if (SortTW != null) {
            stmt.bindString(5, SortTW);
        }
 
        String SortCN = entity.getSortCN();
        if (SortCN != null) {
            stmt.bindString(6, SortCN);
        }
 
        String SortEN = entity.getSortEN();
        if (SortEN != null) {
            stmt.bindString(7, SortEN);
        }
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public Country readEntity(Cursor cursor, int offset) {
        Country entity = new Country( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // CountryID
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // CountryNameTW
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // CountryNameCN
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // CountryNameEN
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // SortTW
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // SortCN
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // SortEN
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Country entity, int offset) {
        entity.setCountryID(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setCountryNameTW(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCountryNameCN(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCountryNameEN(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setSortTW(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setSortCN(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setSortEN(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(Country entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(Country entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
