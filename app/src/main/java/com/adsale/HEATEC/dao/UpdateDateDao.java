package com.adsale.HEATEC.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.adsale.HEATEC.dao.UpdateDate;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "UPDATE_DATE".
*/
public class UpdateDateDao extends AbstractDao<UpdateDate, String> {

    public static final String TABLENAME = "UPDATE_DATE";

    /**
     * Properties of entity UpdateDate.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property ModuleID = new Property(0, String.class, "ModuleID", true, "MODULE_ID");
        public final static Property LastUpdateDate = new Property(1, String.class, "LastUpdateDate", false, "LAST_UPDATE_DATE");
    };


    public UpdateDateDao(DaoConfig config) {
        super(config);
    }
    
    public UpdateDateDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"UPDATE_DATE\" (" + //
                "\"MODULE_ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: ModuleID
                "\"LAST_UPDATE_DATE\" TEXT);"); // 1: LastUpdateDate
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"UPDATE_DATE\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, UpdateDate entity) {
        stmt.clearBindings();
 
        String ModuleID = entity.getModuleID();
        if (ModuleID != null) {
            stmt.bindString(1, ModuleID);
        }
 
        String LastUpdateDate = entity.getLastUpdateDate();
        if (LastUpdateDate != null) {
            stmt.bindString(2, LastUpdateDate);
        }
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public UpdateDate readEntity(Cursor cursor, int offset) {
        UpdateDate entity = new UpdateDate( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // ModuleID
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1) // LastUpdateDate
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, UpdateDate entity, int offset) {
        entity.setModuleID(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setLastUpdateDate(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(UpdateDate entity, long rowId) {
        return entity.getModuleID();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(UpdateDate entity) {
        if(entity != null) {
            return entity.getModuleID();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
