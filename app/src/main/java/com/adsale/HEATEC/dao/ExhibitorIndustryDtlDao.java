package com.adsale.HEATEC.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.adsale.HEATEC.dao.ExhibitorIndustryDtl;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "EXHIBITOR_INDUSTRY_DTL".
*/
public class ExhibitorIndustryDtlDao extends AbstractDao<ExhibitorIndustryDtl, String> {

    public static final String TABLENAME = "EXHIBITOR_INDUSTRY_DTL";

    /**
     * Properties of entity ExhibitorIndustryDtl.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property CompanyID = new Property(0, String.class, "CompanyID", true, "COMPANY_ID");
        public final static Property IsDelete = new Property(1, Boolean.class, "IsDelete", false, "IS_DELETE");
        public final static Property IndustryID = new Property(2, String.class, "IndustryID", false, "INDUSTRY_ID");
        public final static Property CreateDateTime = new Property(3, String.class, "CreateDateTime", false, "CREATE_DATE_TIME");
        public final static Property UpdateDateTime = new Property(4, String.class, "UpdateDateTime", false, "UPDATE_DATE_TIME");
        public final static Property RecordTimeStamp = new Property(5, String.class, "RecordTimeStamp", false, "RECORD_TIME_STAMP");
    };


    public ExhibitorIndustryDtlDao(DaoConfig config) {
        super(config);
    }
    
    public ExhibitorIndustryDtlDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"EXHIBITOR_INDUSTRY_DTL\" (" + //
                "\"COMPANY_ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: CompanyID
                "\"IS_DELETE\" INTEGER," + // 1: IsDelete
                "\"INDUSTRY_ID\" TEXT NOT NULL ," + // 2: IndustryID
                "\"CREATE_DATE_TIME\" TEXT NOT NULL ," + // 3: CreateDateTime
                "\"UPDATE_DATE_TIME\" TEXT NOT NULL ," + // 4: UpdateDateTime
                "\"RECORD_TIME_STAMP\" TEXT NOT NULL );"); // 5: RecordTimeStamp
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"EXHIBITOR_INDUSTRY_DTL\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, ExhibitorIndustryDtl entity) {
        stmt.clearBindings();
 
        String CompanyID = entity.getCompanyID();
        if (CompanyID != null) {
            stmt.bindString(1, CompanyID);
        }
 
        Boolean IsDelete = entity.getIsDelete();
        if (IsDelete != null) {
            stmt.bindLong(2, IsDelete ? 1L: 0L);
        }
        stmt.bindString(3, entity.getIndustryID());
        stmt.bindString(4, entity.getCreateDateTime());
        stmt.bindString(5, entity.getUpdateDateTime());
        stmt.bindString(6, entity.getRecordTimeStamp());
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public ExhibitorIndustryDtl readEntity(Cursor cursor, int offset) {
        ExhibitorIndustryDtl entity = new ExhibitorIndustryDtl( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // CompanyID
            cursor.isNull(offset + 1) ? null : cursor.getShort(offset + 1) != 0, // IsDelete
            cursor.getString(offset + 2), // IndustryID
            cursor.getString(offset + 3), // CreateDateTime
            cursor.getString(offset + 4), // UpdateDateTime
            cursor.getString(offset + 5) // RecordTimeStamp
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, ExhibitorIndustryDtl entity, int offset) {
        entity.setCompanyID(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setIsDelete(cursor.isNull(offset + 1) ? null : cursor.getShort(offset + 1) != 0);
        entity.setIndustryID(cursor.getString(offset + 2));
        entity.setCreateDateTime(cursor.getString(offset + 3));
        entity.setUpdateDateTime(cursor.getString(offset + 4));
        entity.setRecordTimeStamp(cursor.getString(offset + 5));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(ExhibitorIndustryDtl entity, long rowId) {
        return entity.getCompanyID();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(ExhibitorIndustryDtl entity) {
        if(entity != null) {
            return entity.getCompanyID();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
