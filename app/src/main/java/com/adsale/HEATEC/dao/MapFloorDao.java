package com.adsale.HEATEC.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.adsale.HEATEC.dao.MapFloor;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MAP_FLOOR".
*/
public class MapFloorDao extends AbstractDao<MapFloor, String> {

    public static final String TABLENAME = "MAP_FLOOR";

    /**
     * Properties of entity MapFloor.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property MapFloorID = new Property(0, String.class, "MapFloorID", true, "MAP_FLOOR_ID");
        public final static Property IsDelete = new Property(1, Boolean.class, "IsDelete", false, "IS_DELETE");
        public final static Property ParentID = new Property(2, String.class, "ParentID", false, "PARENT_ID");
        public final static Property Type = new Property(3, Integer.class, "Type", false, "TYPE");
        public final static Property NameTW = new Property(4, String.class, "NameTW", false, "NAME_TW");
        public final static Property NameCN = new Property(5, String.class, "NameCN", false, "NAME_CN");
        public final static Property NameEN = new Property(6, String.class, "NameEN", false, "NAME_EN");
        public final static Property SEQ = new Property(7, Integer.class, "SEQ", false, "SEQ");
        public final static Property CreateDateTime = new Property(8, String.class, "CreateDateTime", false, "CREATE_DATE_TIME");
        public final static Property UpdateDateTime = new Property(9, String.class, "UpdateDateTime", false, "UPDATE_DATE_TIME");
        public final static Property RecordTimeStamp = new Property(10, String.class, "RecordTimeStamp", false, "RECORD_TIME_STAMP");
    };


    public MapFloorDao(DaoConfig config) {
        super(config);
    }
    
    public MapFloorDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MAP_FLOOR\" (" + //
                "\"MAP_FLOOR_ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: MapFloorID
                "\"IS_DELETE\" INTEGER," + // 1: IsDelete
                "\"PARENT_ID\" TEXT," + // 2: ParentID
                "\"TYPE\" INTEGER," + // 3: Type
                "\"NAME_TW\" TEXT," + // 4: NameTW
                "\"NAME_CN\" TEXT," + // 5: NameCN
                "\"NAME_EN\" TEXT," + // 6: NameEN
                "\"SEQ\" INTEGER," + // 7: SEQ
                "\"CREATE_DATE_TIME\" TEXT NOT NULL ," + // 8: CreateDateTime
                "\"UPDATE_DATE_TIME\" TEXT NOT NULL ," + // 9: UpdateDateTime
                "\"RECORD_TIME_STAMP\" TEXT NOT NULL );"); // 10: RecordTimeStamp
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MAP_FLOOR\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, MapFloor entity) {
        stmt.clearBindings();
 
        String MapFloorID = entity.getMapFloorID();
        if (MapFloorID != null) {
            stmt.bindString(1, MapFloorID);
        }
 
        Boolean IsDelete = entity.getIsDelete();
        if (IsDelete != null) {
            stmt.bindLong(2, IsDelete ? 1L: 0L);
        }
 
        String ParentID = entity.getParentID();
        if (ParentID != null) {
            stmt.bindString(3, ParentID);
        }
 
        Integer Type = entity.getType();
        if (Type != null) {
            stmt.bindLong(4, Type);
        }
 
        String NameTW = entity.getNameTW();
        if (NameTW != null) {
            stmt.bindString(5, NameTW);
        }
 
        String NameCN = entity.getNameCN();
        if (NameCN != null) {
            stmt.bindString(6, NameCN);
        }
 
        String NameEN = entity.getNameEN();
        if (NameEN != null) {
            stmt.bindString(7, NameEN);
        }
 
        Integer SEQ = entity.getSEQ();
        if (SEQ != null) {
            stmt.bindLong(8, SEQ);
        }
        stmt.bindString(9, entity.getCreateDateTime());
        stmt.bindString(10, entity.getUpdateDateTime());
        stmt.bindString(11, entity.getRecordTimeStamp());
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public MapFloor readEntity(Cursor cursor, int offset) {
        MapFloor entity = new MapFloor( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // MapFloorID
            cursor.isNull(offset + 1) ? null : cursor.getShort(offset + 1) != 0, // IsDelete
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // ParentID
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // Type
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // NameTW
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // NameCN
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // NameEN
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // SEQ
            cursor.getString(offset + 8), // CreateDateTime
            cursor.getString(offset + 9), // UpdateDateTime
            cursor.getString(offset + 10) // RecordTimeStamp
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, MapFloor entity, int offset) {
        entity.setMapFloorID(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setIsDelete(cursor.isNull(offset + 1) ? null : cursor.getShort(offset + 1) != 0);
        entity.setParentID(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setType(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setNameTW(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setNameCN(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setNameEN(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setSEQ(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setCreateDateTime(cursor.getString(offset + 8));
        entity.setUpdateDateTime(cursor.getString(offset + 9));
        entity.setRecordTimeStamp(cursor.getString(offset + 10));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(MapFloor entity, long rowId) {
        return entity.getMapFloorID();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(MapFloor entity) {
        if(entity != null) {
            return entity.getMapFloorID();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
