package com.adsale.HEATEC.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.adsale.HEATEC.dao.Industry;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "INDUSTRY".
*/
public class IndustryDao extends AbstractDao<Industry, String> {

    public static final String TABLENAME = "INDUSTRY";

    /**
     * Properties of entity Industry.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property IndustryID = new Property(0, String.class, "IndustryID", true, "INDUSTRY_ID");
        public final static Property IsDelete = new Property(1, Boolean.class, "IsDelete", false, "IS_DELETE");
        public final static Property IndustryNameTW = new Property(2, String.class, "IndustryNameTW", false, "INDUSTRY_NAME_TW");
        public final static Property IndustryNameCN = new Property(3, String.class, "IndustryNameCN", false, "INDUSTRY_NAME_CN");
        public final static Property IndustryNameEN = new Property(4, String.class, "IndustryNameEN", false, "INDUSTRY_NAME_EN");
        public final static Property SortTW = new Property(5, String.class, "SortTW", false, "SORT_TW");
        public final static Property SortCN = new Property(6, String.class, "SortCN", false, "SORT_CN");
        public final static Property SortEN = new Property(7, String.class, "SortEN", false, "SORT_EN");
        public final static Property CreateDateTime = new Property(8, String.class, "CreateDateTime", false, "CREATE_DATE_TIME");
        public final static Property UpdateDateTime = new Property(9, String.class, "UpdateDateTime", false, "UPDATE_DATE_TIME");
        public final static Property RecordTimeStamp = new Property(10, String.class, "RecordTimeStamp", false, "RECORD_TIME_STAMP");
    };


    public IndustryDao(DaoConfig config) {
        super(config);
    }
    
    public IndustryDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"INDUSTRY\" (" + //
                "\"INDUSTRY_ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: IndustryID
                "\"IS_DELETE\" INTEGER," + // 1: IsDelete
                "\"INDUSTRY_NAME_TW\" TEXT," + // 2: IndustryNameTW
                "\"INDUSTRY_NAME_CN\" TEXT," + // 3: IndustryNameCN
                "\"INDUSTRY_NAME_EN\" TEXT," + // 4: IndustryNameEN
                "\"SORT_TW\" TEXT," + // 5: SortTW
                "\"SORT_CN\" TEXT," + // 6: SortCN
                "\"SORT_EN\" TEXT," + // 7: SortEN
                "\"CREATE_DATE_TIME\" TEXT," + // 8: CreateDateTime
                "\"UPDATE_DATE_TIME\" TEXT," + // 9: UpdateDateTime
                "\"RECORD_TIME_STAMP\" TEXT);"); // 10: RecordTimeStamp
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"INDUSTRY\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Industry entity) {
        stmt.clearBindings();
 
        String IndustryID = entity.getIndustryID();
        if (IndustryID != null) {
            stmt.bindString(1, IndustryID);
        }
 
        Boolean IsDelete = entity.getIsDelete();
        if (IsDelete != null) {
            stmt.bindLong(2, IsDelete ? 1L: 0L);
        }
 
        String IndustryNameTW = entity.getIndustryNameTW();
        if (IndustryNameTW != null) {
            stmt.bindString(3, IndustryNameTW);
        }
 
        String IndustryNameCN = entity.getIndustryNameCN();
        if (IndustryNameCN != null) {
            stmt.bindString(4, IndustryNameCN);
        }
 
        String IndustryNameEN = entity.getIndustryNameEN();
        if (IndustryNameEN != null) {
            stmt.bindString(5, IndustryNameEN);
        }
 
        String SortTW = entity.getSortTW();
        if (SortTW != null) {
            stmt.bindString(6, SortTW);
        }
 
        String SortCN = entity.getSortCN();
        if (SortCN != null) {
            stmt.bindString(7, SortCN);
        }
 
        String SortEN = entity.getSortEN();
        if (SortEN != null) {
            stmt.bindString(8, SortEN);
        }
 
        String CreateDateTime = entity.getCreateDateTime();
        if (CreateDateTime != null) {
            stmt.bindString(9, CreateDateTime);
        }
 
        String UpdateDateTime = entity.getUpdateDateTime();
        if (UpdateDateTime != null) {
            stmt.bindString(10, UpdateDateTime);
        }
 
        String RecordTimeStamp = entity.getRecordTimeStamp();
        if (RecordTimeStamp != null) {
            stmt.bindString(11, RecordTimeStamp);
        }
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Industry readEntity(Cursor cursor, int offset) {
        Industry entity = new Industry( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // IndustryID
            cursor.isNull(offset + 1) ? null : cursor.getShort(offset + 1) != 0, // IsDelete
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // IndustryNameTW
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // IndustryNameCN
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // IndustryNameEN
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // SortTW
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // SortCN
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // SortEN
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // CreateDateTime
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // UpdateDateTime
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10) // RecordTimeStamp
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Industry entity, int offset) {
        entity.setIndustryID(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setIsDelete(cursor.isNull(offset + 1) ? null : cursor.getShort(offset + 1) != 0);
        entity.setIndustryNameTW(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setIndustryNameCN(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setIndustryNameEN(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setSortTW(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setSortCN(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setSortEN(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setCreateDateTime(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setUpdateDateTime(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setRecordTimeStamp(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(Industry entity, long rowId) {
        return entity.getIndustryID();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(Industry entity) {
        if(entity != null) {
            return entity.getIndustryID();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
