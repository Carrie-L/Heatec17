package com.adsale.HEATEC.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.adsale.HEATEC.dao.WebContent;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "WEB_CONTENT".
*/
public class WebContentDao extends AbstractDao<WebContent, String> {

    public static final String TABLENAME = "WEB_CONTENT";

    /**
     * Properties of entity WebContent.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property PageId = new Property(0, String.class, "PageId", true, "PAGE_ID");
        public final static Property IsDelete = new Property(1, Boolean.class, "IsDelete", false, "IS_DELETE");
        public final static Property TitleTW = new Property(2, String.class, "TitleTW", false, "TITLE_TW");
        public final static Property TitleCN = new Property(3, String.class, "TitleCN", false, "TITLE_CN");
        public final static Property TitleEN = new Property(4, String.class, "TitleEN", false, "TITLE_EN");
        public final static Property CType = new Property(5, Integer.class, "CType", false, "CTYPE");
        public final static Property CFile = new Property(6, String.class, "CFile", false, "CFILE");
        public final static Property ZipDateTime = new Property(7, String.class, "ZipDateTime", false, "ZIP_DATE_TIME");
        public final static Property ContentEN = new Property(8, String.class, "ContentEN", false, "CONTENT_EN");
        public final static Property ContentSC = new Property(9, String.class, "ContentSC", false, "CONTENT_SC");
        public final static Property ContentTC = new Property(10, String.class, "ContentTC", false, "CONTENT_TC");
        public final static Property CreateDateTime = new Property(11, String.class, "CreateDateTime", false, "CREATE_DATE_TIME");
        public final static Property UpdateDateTime = new Property(12, String.class, "UpdateDateTime", false, "UPDATE_DATE_TIME");
        public final static Property RecordTimeStamp = new Property(13, String.class, "RecordTimeStamp", false, "RECORD_TIME_STAMP");
        public final static Property IsDown = new Property(14, Integer.class, "IsDown", false, "IS_DOWN");
    };


    public WebContentDao(DaoConfig config) {
        super(config);
    }
    
    public WebContentDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"WEB_CONTENT\" (" + //
                "\"PAGE_ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: PageId
                "\"IS_DELETE\" INTEGER," + // 1: IsDelete
                "\"TITLE_TW\" TEXT," + // 2: TitleTW
                "\"TITLE_CN\" TEXT," + // 3: TitleCN
                "\"TITLE_EN\" TEXT," + // 4: TitleEN
                "\"CTYPE\" INTEGER," + // 5: CType
                "\"CFILE\" TEXT," + // 6: CFile
                "\"ZIP_DATE_TIME\" TEXT," + // 7: ZipDateTime
                "\"CONTENT_EN\" TEXT," + // 8: ContentEN
                "\"CONTENT_SC\" TEXT," + // 9: ContentSC
                "\"CONTENT_TC\" TEXT," + // 10: ContentTC
                "\"CREATE_DATE_TIME\" TEXT," + // 11: CreateDateTime
                "\"UPDATE_DATE_TIME\" TEXT," + // 12: UpdateDateTime
                "\"RECORD_TIME_STAMP\" TEXT," + // 13: RecordTimeStamp
                "\"IS_DOWN\" INTEGER);"); // 14: IsDown
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"WEB_CONTENT\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, WebContent entity) {
        stmt.clearBindings();
 
        String PageId = entity.getPageId();
        if (PageId != null) {
            stmt.bindString(1, PageId);
        }
 
        Boolean IsDelete = entity.getIsDelete();
        if (IsDelete != null) {
            stmt.bindLong(2, IsDelete ? 1L: 0L);
        }
 
        String TitleTW = entity.getTitleTW();
        if (TitleTW != null) {
            stmt.bindString(3, TitleTW);
        }
 
        String TitleCN = entity.getTitleCN();
        if (TitleCN != null) {
            stmt.bindString(4, TitleCN);
        }
 
        String TitleEN = entity.getTitleEN();
        if (TitleEN != null) {
            stmt.bindString(5, TitleEN);
        }
 
        Integer CType = entity.getCType();
        if (CType != null) {
            stmt.bindLong(6, CType);
        }
 
        String CFile = entity.getCFile();
        if (CFile != null) {
            stmt.bindString(7, CFile);
        }
 
        String ZipDateTime = entity.getZipDateTime();
        if (ZipDateTime != null) {
            stmt.bindString(8, ZipDateTime);
        }
 
        String ContentEN = entity.getContentEN();
        if (ContentEN != null) {
            stmt.bindString(9, ContentEN);
        }
 
        String ContentSC = entity.getContentSC();
        if (ContentSC != null) {
            stmt.bindString(10, ContentSC);
        }
 
        String ContentTC = entity.getContentTC();
        if (ContentTC != null) {
            stmt.bindString(11, ContentTC);
        }
 
        String CreateDateTime = entity.getCreateDateTime();
        if (CreateDateTime != null) {
            stmt.bindString(12, CreateDateTime);
        }
 
        String UpdateDateTime = entity.getUpdateDateTime();
        if (UpdateDateTime != null) {
            stmt.bindString(13, UpdateDateTime);
        }
 
        String RecordTimeStamp = entity.getRecordTimeStamp();
        if (RecordTimeStamp != null) {
            stmt.bindString(14, RecordTimeStamp);
        }
 
        Integer IsDown = entity.getIsDown();
        if (IsDown != null) {
            stmt.bindLong(15, IsDown);
        }
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public WebContent readEntity(Cursor cursor, int offset) {
        WebContent entity = new WebContent( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // PageId
            cursor.isNull(offset + 1) ? null : cursor.getShort(offset + 1) != 0, // IsDelete
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // TitleTW
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // TitleCN
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // TitleEN
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // CType
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // CFile
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // ZipDateTime
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // ContentEN
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // ContentSC
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // ContentTC
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // CreateDateTime
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // UpdateDateTime
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // RecordTimeStamp
            cursor.isNull(offset + 14) ? null : cursor.getInt(offset + 14) // IsDown
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, WebContent entity, int offset) {
        entity.setPageId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setIsDelete(cursor.isNull(offset + 1) ? null : cursor.getShort(offset + 1) != 0);
        entity.setTitleTW(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setTitleCN(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setTitleEN(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setCType(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setCFile(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setZipDateTime(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setContentEN(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setContentSC(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setContentTC(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setCreateDateTime(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setUpdateDateTime(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setRecordTimeStamp(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setIsDown(cursor.isNull(offset + 14) ? null : cursor.getInt(offset + 14));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(WebContent entity, long rowId) {
        return entity.getPageId();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(WebContent entity) {
        if(entity != null) {
            return entity.getPageId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
