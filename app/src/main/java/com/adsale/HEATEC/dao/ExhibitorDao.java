package com.adsale.HEATEC.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.adsale.HEATEC.dao.Exhibitor;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "EXHIBITOR".
*/
public class ExhibitorDao extends AbstractDao<Exhibitor, String> {

    public static final String TABLENAME = "EXHIBITOR";

    /**
     * Properties of entity Exhibitor.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property CompanyID = new Property(0, String.class, "CompanyID", true, "COMPANY_ID");
        public final static Property IsDelete = new Property(1, Boolean.class, "IsDelete", false, "IS_DELETE");
        public final static Property CompanyNameTW = new Property(2, String.class, "CompanyNameTW", false, "COMPANY_NAME_TW");
        public final static Property DescriptionTW = new Property(3, String.class, "DescriptionTW", false, "DESCRIPTION_TW");
        public final static Property AddressTW = new Property(4, String.class, "AddressTW", false, "ADDRESS_TW");
        public final static Property SortTW = new Property(5, String.class, "SortTW", false, "SORT_TW");
        public final static Property CompanyNameCN = new Property(6, String.class, "CompanyNameCN", false, "COMPANY_NAME_CN");
        public final static Property DescriptionCN = new Property(7, String.class, "DescriptionCN", false, "DESCRIPTION_CN");
        public final static Property AddressCN = new Property(8, String.class, "AddressCN", false, "ADDRESS_CN");
        public final static Property SortCN = new Property(9, String.class, "SortCN", false, "SORT_CN");
        public final static Property CompanyNameEN = new Property(10, String.class, "CompanyNameEN", false, "COMPANY_NAME_EN");
        public final static Property DescriptionEN = new Property(11, String.class, "DescriptionEN", false, "DESCRIPTION_EN");
        public final static Property AddressEN = new Property(12, String.class, "AddressEN", false, "ADDRESS_EN");
        public final static Property SortEN = new Property(13, String.class, "SortEN", false, "SORT_EN");
        public final static Property ExhibitorNO = new Property(14, String.class, "ExhibitorNO", false, "EXHIBITOR_NO");
        public final static Property CountryID = new Property(15, String.class, "CountryID", false, "COUNTRY_ID");
        public final static Property Logo = new Property(16, String.class, "Logo", false, "LOGO");
        public final static Property Tel = new Property(17, String.class, "Tel", false, "TEL");
        public final static Property Tel1 = new Property(18, String.class, "Tel1", false, "TEL1");
        public final static Property Fax = new Property(19, String.class, "Fax", false, "FAX");
        public final static Property Email = new Property(20, String.class, "Email", false, "EMAIL");
        public final static Property Website = new Property(21, String.class, "Website", false, "WEBSITE");
        public final static Property Longitude = new Property(22, String.class, "Longitude", false, "LONGITUDE");
        public final static Property Latitude = new Property(23, String.class, "Latitude", false, "LATITUDE");
        public final static Property Location_X = new Property(24, String.class, "Location_X", false, "LOCATION__X");
        public final static Property Location_Y = new Property(25, String.class, "Location_Y", false, "LOCATION__Y");
        public final static Property Location_W = new Property(26, String.class, "Location_W", false, "LOCATION__W");
        public final static Property Location_H = new Property(27, String.class, "Location_H", false, "LOCATION__H");
        public final static Property SEQ = new Property(28, String.class, "SEQ", false, "SEQ");
        public final static Property CreateDateTime = new Property(29, String.class, "CreateDateTime", false, "CREATE_DATE_TIME");
        public final static Property UpdateDateTime = new Property(30, String.class, "UpdateDateTime", false, "UPDATE_DATE_TIME");
        public final static Property RecordTimeStamp = new Property(31, String.class, "RecordTimeStamp", false, "RECORD_TIME_STAMP");
        public final static Property ContactTW = new Property(32, String.class, "ContactTW", false, "CONTACT_TW");
        public final static Property TitleTW = new Property(33, String.class, "TitleTW", false, "TITLE_TW");
        public final static Property ContactCN = new Property(34, String.class, "ContactCN", false, "CONTACT_CN");
        public final static Property TitleCN = new Property(35, String.class, "TitleCN", false, "TITLE_CN");
        public final static Property ContactEN = new Property(36, String.class, "ContactEN", false, "CONTACT_EN");
        public final static Property TitleEN = new Property(37, String.class, "TitleEN", false, "TITLE_EN");
        public final static Property IsFavourite = new Property(38, String.class, "IsFavourite", false, "IS_FAVOURITE");
        public final static Property Note = new Property(39, String.class, "Note", false, "NOTE");
        public final static Property Floor = new Property(40, String.class, "Floor", false, "FLOOR");
    };


    public ExhibitorDao(DaoConfig config) {
        super(config);
    }
    
    public ExhibitorDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"EXHIBITOR\" (" + //
                "\"COMPANY_ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: CompanyID
                "\"IS_DELETE\" INTEGER," + // 1: IsDelete
                "\"COMPANY_NAME_TW\" TEXT," + // 2: CompanyNameTW
                "\"DESCRIPTION_TW\" TEXT," + // 3: DescriptionTW
                "\"ADDRESS_TW\" TEXT," + // 4: AddressTW
                "\"SORT_TW\" TEXT," + // 5: SortTW
                "\"COMPANY_NAME_CN\" TEXT," + // 6: CompanyNameCN
                "\"DESCRIPTION_CN\" TEXT," + // 7: DescriptionCN
                "\"ADDRESS_CN\" TEXT," + // 8: AddressCN
                "\"SORT_CN\" TEXT," + // 9: SortCN
                "\"COMPANY_NAME_EN\" TEXT," + // 10: CompanyNameEN
                "\"DESCRIPTION_EN\" TEXT," + // 11: DescriptionEN
                "\"ADDRESS_EN\" TEXT," + // 12: AddressEN
                "\"SORT_EN\" TEXT," + // 13: SortEN
                "\"EXHIBITOR_NO\" TEXT," + // 14: ExhibitorNO
                "\"COUNTRY_ID\" TEXT," + // 15: CountryID
                "\"LOGO\" TEXT," + // 16: Logo
                "\"TEL\" TEXT," + // 17: Tel
                "\"TEL1\" TEXT," + // 18: Tel1
                "\"FAX\" TEXT," + // 19: Fax
                "\"EMAIL\" TEXT," + // 20: Email
                "\"WEBSITE\" TEXT," + // 21: Website
                "\"LONGITUDE\" TEXT," + // 22: Longitude
                "\"LATITUDE\" TEXT," + // 23: Latitude
                "\"LOCATION__X\" TEXT," + // 24: Location_X
                "\"LOCATION__Y\" TEXT," + // 25: Location_Y
                "\"LOCATION__W\" TEXT," + // 26: Location_W
                "\"LOCATION__H\" TEXT," + // 27: Location_H
                "\"SEQ\" TEXT," + // 28: SEQ
                "\"CREATE_DATE_TIME\" TEXT," + // 29: CreateDateTime
                "\"UPDATE_DATE_TIME\" TEXT," + // 30: UpdateDateTime
                "\"RECORD_TIME_STAMP\" TEXT," + // 31: RecordTimeStamp
                "\"CONTACT_TW\" TEXT," + // 32: ContactTW
                "\"TITLE_TW\" TEXT," + // 33: TitleTW
                "\"CONTACT_CN\" TEXT," + // 34: ContactCN
                "\"TITLE_CN\" TEXT," + // 35: TitleCN
                "\"CONTACT_EN\" TEXT," + // 36: ContactEN
                "\"TITLE_EN\" TEXT," + // 37: TitleEN
                "\"IS_FAVOURITE\" TEXT," + // 38: IsFavourite
                "\"NOTE\" TEXT," + // 39: Note
                "\"FLOOR\" TEXT);"); // 40: Floor
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"EXHIBITOR\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Exhibitor entity) {
        stmt.clearBindings();
 
        String CompanyID = entity.getCompanyID();
        if (CompanyID != null) {
            stmt.bindString(1, CompanyID);
        }
 
        Boolean IsDelete = entity.getIsDelete();
        if (IsDelete != null) {
            stmt.bindLong(2, IsDelete ? 1L: 0L);
        }
 
        String CompanyNameTW = entity.getCompanyNameTW();
        if (CompanyNameTW != null) {
            stmt.bindString(3, CompanyNameTW);
        }
 
        String DescriptionTW = entity.getDescriptionTW();
        if (DescriptionTW != null) {
            stmt.bindString(4, DescriptionTW);
        }
 
        String AddressTW = entity.getAddressTW();
        if (AddressTW != null) {
            stmt.bindString(5, AddressTW);
        }
 
        String SortTW = entity.getSortTW();
        if (SortTW != null) {
            stmt.bindString(6, SortTW);
        }
 
        String CompanyNameCN = entity.getCompanyNameCN();
        if (CompanyNameCN != null) {
            stmt.bindString(7, CompanyNameCN);
        }
 
        String DescriptionCN = entity.getDescriptionCN();
        if (DescriptionCN != null) {
            stmt.bindString(8, DescriptionCN);
        }
 
        String AddressCN = entity.getAddressCN();
        if (AddressCN != null) {
            stmt.bindString(9, AddressCN);
        }
 
        String SortCN = entity.getSortCN();
        if (SortCN != null) {
            stmt.bindString(10, SortCN);
        }
 
        String CompanyNameEN = entity.getCompanyNameEN();
        if (CompanyNameEN != null) {
            stmt.bindString(11, CompanyNameEN);
        }
 
        String DescriptionEN = entity.getDescriptionEN();
        if (DescriptionEN != null) {
            stmt.bindString(12, DescriptionEN);
        }
 
        String AddressEN = entity.getAddressEN();
        if (AddressEN != null) {
            stmt.bindString(13, AddressEN);
        }
 
        String SortEN = entity.getSortEN();
        if (SortEN != null) {
            stmt.bindString(14, SortEN);
        }
 
        String ExhibitorNO = entity.getExhibitorNO();
        if (ExhibitorNO != null) {
            stmt.bindString(15, ExhibitorNO);
        }
 
        String CountryID = entity.getCountryID();
        if (CountryID != null) {
            stmt.bindString(16, CountryID);
        }
 
        String Logo = entity.getLogo();
        if (Logo != null) {
            stmt.bindString(17, Logo);
        }
 
        String Tel = entity.getTel();
        if (Tel != null) {
            stmt.bindString(18, Tel);
        }
 
        String Tel1 = entity.getTel1();
        if (Tel1 != null) {
            stmt.bindString(19, Tel1);
        }
 
        String Fax = entity.getFax();
        if (Fax != null) {
            stmt.bindString(20, Fax);
        }
 
        String Email = entity.getEmail();
        if (Email != null) {
            stmt.bindString(21, Email);
        }
 
        String Website = entity.getWebsite();
        if (Website != null) {
            stmt.bindString(22, Website);
        }
 
        String Longitude = entity.getLongitude();
        if (Longitude != null) {
            stmt.bindString(23, Longitude);
        }
 
        String Latitude = entity.getLatitude();
        if (Latitude != null) {
            stmt.bindString(24, Latitude);
        }
 
        String Location_X = entity.getLocation_X();
        if (Location_X != null) {
            stmt.bindString(25, Location_X);
        }
 
        String Location_Y = entity.getLocation_Y();
        if (Location_Y != null) {
            stmt.bindString(26, Location_Y);
        }
 
        String Location_W = entity.getLocation_W();
        if (Location_W != null) {
            stmt.bindString(27, Location_W);
        }
 
        String Location_H = entity.getLocation_H();
        if (Location_H != null) {
            stmt.bindString(28, Location_H);
        }
 
        String SEQ = entity.getSEQ();
        if (SEQ != null) {
            stmt.bindString(29, SEQ);
        }
 
        String CreateDateTime = entity.getCreateDateTime();
        if (CreateDateTime != null) {
            stmt.bindString(30, CreateDateTime);
        }
 
        String UpdateDateTime = entity.getUpdateDateTime();
        if (UpdateDateTime != null) {
            stmt.bindString(31, UpdateDateTime);
        }
 
        String RecordTimeStamp = entity.getRecordTimeStamp();
        if (RecordTimeStamp != null) {
            stmt.bindString(32, RecordTimeStamp);
        }
 
        String ContactTW = entity.getContactTW();
        if (ContactTW != null) {
            stmt.bindString(33, ContactTW);
        }
 
        String TitleTW = entity.getTitleTW();
        if (TitleTW != null) {
            stmt.bindString(34, TitleTW);
        }
 
        String ContactCN = entity.getContactCN();
        if (ContactCN != null) {
            stmt.bindString(35, ContactCN);
        }
 
        String TitleCN = entity.getTitleCN();
        if (TitleCN != null) {
            stmt.bindString(36, TitleCN);
        }
 
        String ContactEN = entity.getContactEN();
        if (ContactEN != null) {
            stmt.bindString(37, ContactEN);
        }
 
        String TitleEN = entity.getTitleEN();
        if (TitleEN != null) {
            stmt.bindString(38, TitleEN);
        }
 
        String IsFavourite = entity.getIsFavourite();
        if (IsFavourite != null) {
            stmt.bindString(39, IsFavourite);
        }
 
        String Note = entity.getNote();
        if (Note != null) {
            stmt.bindString(40, Note);
        }
 
        String Floor = entity.getFloor();
        if (Floor != null) {
            stmt.bindString(41, Floor);
        }
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Exhibitor readEntity(Cursor cursor, int offset) {
        Exhibitor entity = new Exhibitor( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // CompanyID
            cursor.isNull(offset + 1) ? null : cursor.getShort(offset + 1) != 0, // IsDelete
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // CompanyNameTW
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // DescriptionTW
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // AddressTW
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // SortTW
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // CompanyNameCN
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // DescriptionCN
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // AddressCN
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // SortCN
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // CompanyNameEN
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // DescriptionEN
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // AddressEN
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // SortEN
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // ExhibitorNO
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // CountryID
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // Logo
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // Tel
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // Tel1
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // Fax
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // Email
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // Website
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22), // Longitude
            cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23), // Latitude
            cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24), // Location_X
            cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25), // Location_Y
            cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26), // Location_W
            cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27), // Location_H
            cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28), // SEQ
            cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29), // CreateDateTime
            cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30), // UpdateDateTime
            cursor.isNull(offset + 31) ? null : cursor.getString(offset + 31), // RecordTimeStamp
            cursor.isNull(offset + 32) ? null : cursor.getString(offset + 32), // ContactTW
            cursor.isNull(offset + 33) ? null : cursor.getString(offset + 33), // TitleTW
            cursor.isNull(offset + 34) ? null : cursor.getString(offset + 34), // ContactCN
            cursor.isNull(offset + 35) ? null : cursor.getString(offset + 35), // TitleCN
            cursor.isNull(offset + 36) ? null : cursor.getString(offset + 36), // ContactEN
            cursor.isNull(offset + 37) ? null : cursor.getString(offset + 37), // TitleEN
            cursor.isNull(offset + 38) ? null : cursor.getString(offset + 38), // IsFavourite
            cursor.isNull(offset + 39) ? null : cursor.getString(offset + 39), // Note
            cursor.isNull(offset + 40) ? null : cursor.getString(offset + 40) // Floor
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Exhibitor entity, int offset) {
        entity.setCompanyID(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setIsDelete(cursor.isNull(offset + 1) ? null : cursor.getShort(offset + 1) != 0);
        entity.setCompanyNameTW(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setDescriptionTW(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setAddressTW(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setSortTW(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setCompanyNameCN(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setDescriptionCN(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setAddressCN(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setSortCN(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setCompanyNameEN(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setDescriptionEN(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setAddressEN(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setSortEN(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setExhibitorNO(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setCountryID(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setLogo(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setTel(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setTel1(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setFax(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setEmail(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setWebsite(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setLongitude(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
        entity.setLatitude(cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23));
        entity.setLocation_X(cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24));
        entity.setLocation_Y(cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25));
        entity.setLocation_W(cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26));
        entity.setLocation_H(cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27));
        entity.setSEQ(cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28));
        entity.setCreateDateTime(cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29));
        entity.setUpdateDateTime(cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30));
        entity.setRecordTimeStamp(cursor.isNull(offset + 31) ? null : cursor.getString(offset + 31));
        entity.setContactTW(cursor.isNull(offset + 32) ? null : cursor.getString(offset + 32));
        entity.setTitleTW(cursor.isNull(offset + 33) ? null : cursor.getString(offset + 33));
        entity.setContactCN(cursor.isNull(offset + 34) ? null : cursor.getString(offset + 34));
        entity.setTitleCN(cursor.isNull(offset + 35) ? null : cursor.getString(offset + 35));
        entity.setContactEN(cursor.isNull(offset + 36) ? null : cursor.getString(offset + 36));
        entity.setTitleEN(cursor.isNull(offset + 37) ? null : cursor.getString(offset + 37));
        entity.setIsFavourite(cursor.isNull(offset + 38) ? null : cursor.getString(offset + 38));
        entity.setNote(cursor.isNull(offset + 39) ? null : cursor.getString(offset + 39));
        entity.setFloor(cursor.isNull(offset + 40) ? null : cursor.getString(offset + 40));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(Exhibitor entity, long rowId) {
        return entity.getCompanyID();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(Exhibitor entity) {
        if(entity != null) {
            return entity.getCompanyID();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
